use cryptopals::math::pollard_lambda;
use num_bigint::BigUint;
use std::time::Instant;

fn ex() {
    let p = &BigUint::parse_bytes(b"11470374874925275658116663507232161402086650258453896274534991676898999262641581519101074740642369848233294239851519212341844337347119899874391456329785623", 10).expect("not a number");
    let g = &BigUint::parse_bytes(b"622952335333961296978159266084741085889881358738459939978290179936063635566740258555167783009058567397963466103140082647486611657350811560630587013183357", 10).expect("not a number");
    //let y = &BigUint::parse_bytes(b"7760073848032689505395005705677365876654629189298052775754597607446617558600394076764814236081991643094239886772481052254010323780165093955236429914607119", 10).expect("not a number");
    //let upper = 20;
    //let q = &BigUint::parse_bytes(b"335062023296420808191071248367701059461", 10).expect("not a number");
    //let j = &BigUint::parse_bytes(b"34233586850807404623475048381328686211071196701374230492615844865929237417097514638999377942356150481334217896204702", 10).expect("not a number");
    let y = &BigUint::parse_bytes(b"9388897478013399550694114614498790691034187453089355259602614074132918843899833277397448144245883225611726912025846772975325932794909655215329941809013733", 10).expect("not a number");
    let upper = 40;
    let k = upper as u8 >> 1;
    for c in 2..15 {
        let start = Instant::now();
        let x = pollard_lambda(p, g, y, &0u8.into(), &2usize.pow(upper).into(), k, c);
        let dur = start.elapsed();
        println!("{:?} {} {}", x, c, dur.as_millis());
    }
}

fn main() {
    ex()
}
